""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                            "
"                               Evan Hahn's vimrc                            "
"                                 evanhahn.com                               "
"                                                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Table of contents
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 0. Vundle and plugins
" 1. Functional settings
" 2. Interface settings
" 3. Visual settings

" 0. Vundle and plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Vundle setup
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

" Allow plugins to eat `.`
Bundle 'tpope/vim-repeat'

" File browser stuff
Bundle 'scrooloose/nerdtree'
Bundle 'kien/ctrlp.vim'

" Git
Bundle 'tpope/vim-fugitive'

" Syntax checking
Bundle 'scrooloose/syntastic'

" Excellent tab completion
Bundle 'ervandew/supertab'

" Indent guides, a la Sublime
Bundle 'nathanaelkane/vim-indent-guides'

" Commenting and uncommenting
Bundle 'tpope/vim-commentary'

" Fix misspellings
Bundle 'chip/vim-fat-finger'

" Syntax highlightings
Bundle 'Markdown'
Bundle 'jQuery'
Bundle 'rails.vim'
Bundle 'ChrisYip/Better-CSS-Syntax-for-Vim'
Bundle 'lunaru/vim-less'
Bundle 'kchmck/vim-coffee-script'
Bundle 'leafgarland/typescript-vim'

" Auto-add "end" in Ruby
Bundle 'tpope/vim-endwise'

" Vim + iTerm2 + tmux
Bundle 'sjl/vitality.vim'

" Jellybeans colorscheme
Bundle 'nanotech/jellybeans.vim'

" 1. Functional settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Remember lots of commands
set history=1000

" Autoupdate files from the outside
set autoread

" pwd should be this file, not some other madness
set autochdir

" Disable backup
set nobackup
set nowritebackup
set noswapfile

" Things to ignore
set wildignore=*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.class,.svn,*.gem

" English language and no spellchecking by default
if has('spell')
	silent! language messages "en"
	set langmenu=none
	set spl=en spell
	set nospell
endif

" No syntax highlighting for any file that's larger than .5MB
if has('autocmd')
	autocmd BufReadPost * if getfsize(bufname("%")) > 512*1024 |
	\ set syntax= |
	\ endif
endif

" Language-specific
filetype plugin indent on
if has('autocmd')

	au BufRead,BufNewFile {Gemfile,Capfile,Kirkfile,Rakefile,Thorfile,config.ru} set ft=ruby
	au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown
	au BufRead,BufNewFile *.less set filetype=less
	au BufRead,BufNewFile *.json set ft=javascript
	au BufNewFile,BufRead *gitconfig setf gitconfig

	au Filetype html,xml source ~/.vim/scripts/closetag.vim

	au FileType coffee  setl ts=2 sw=2 expandtab
	au FileType ruby    setl ts=2 sw=2 expandtab

	if has('spell')
		au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell
		au BufNewFile,BufRead *.asciidoc setlocal spell
	endif

	au BufNewFile,BufRead COMMIT_EDITMSG call feedkeys('ggi', 't') " Git commits go to top of line and into insert mode

endif

" Reload vimrc when it's changed
if has('autocmd')
	autocmd! BufWritePost vimrc source ~/.vimrc
endif

" Return to normal mode when focus is lost
if has('autocmd')
	au FocusLost * call feedkeys("\<C-\>\<C-n>")
endif

" UTF-8 is the only format
set encoding=utf-8

" 2. Interface settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Split in the correct direction
set splitbelow
set splitright

" Mouse support
if has('mouse')
	set mouse=a
	set mousehide
endif

" Comma is leader
let mapleader = ','
let g:mapleader = ','

" Map Y to act like D and C: yank to EOL
map Y y$

" When moving up/down, go visually, not by line
map j gj
map k gk

" I accidentally do K more than I would ever use it
nnoremap K <nop>

" :W == :w
cnoreabbrev W w

" 0 is ^
noremap 0 ^

" Restore previous cursor position
if has('autocmd')
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" Indenting
filetype indent on
set autoindent smartindent        " Auto-indent
set smarttab                      " Better tab
set noexpandtab                   " Tabbed indent by default (overridden at times)
set copyindent preserveindent     " Preserve indent structure
set softtabstop=0                 " No spaces when tabbing
set shiftwidth=2                  " Two characters wide when using >> and stuff
set tabstop=2                     " Tabs count for 2 spaces
set shiftround                    " Indent as multiple of tab width

" Searching
set ignorecase    " Ignore case when searching...
set smartcase     " ...unless there are caps.
set incsearch     " Incremental search
set hlsearch      " Highlight matches
set gdefault      " Assume global search

" So I'm not sure what this does but it looks cool
set nojoinspaces

" Fix backspace on Windows
set backspace=2

" Undo level
set ul=1000

" Save undo history
if has('undodir')
	set undodir=~/.vim/backups
endif
if has('undofile')
	set undofile
endif

" NERDTree
nmap <silent> <c-n> :NERDTreeToggle<CR>  " control + N opens NERDTree
if has('autocmd')
	au Filetype nerdtree setlocal nolist         " No hidden characters in NERDTree
	au vimenter * if !argc() | NERDTree | endif  " Show NERDTree if nothing is open
	au bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif  " Quit if NERDTree is the only thing
endif

" Let us make our commands beautiful
set wildmenu
set wildmode=list:longest,full

" Timeout on multi-key stuff
set ttimeout
set ttimeoutlen=50

" Start the Indent Guides plugin, but only on gvims
if version >= 702
	if has('gui_running')
		let g:indent_guides_enable_on_vim_startup=1
	endif
endif

" ctrlp.vim
let g:ctrlp_clear_cache_on_exit = 1

" Syntastic
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1          " Put errors on left side
let g:syntastic_quiet_warnings=1        " Only errors, not warnings please
let g:syntastic_auto_loc_list=2         " Only show errors when I ask
let g:syntastic_disabled_filetypes = ['html', 'js']

" Syntastic styles
if has('unix')
	let g:syntastic_error_symbol='★'
	let g:syntastic_style_error_symbol='>'
	let g:syntastic_warning_symbol='⚠'
	let g:syntastic_style_warning_symbol='>'
else
	let g:syntastic_error_symbol='!'
	let g:syntastic_style_error_symbol='>'
	let g:syntastic_warning_symbol='.'
	let g:syntastic_style_warning_symbol='>'
endif

" 3. Visual settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" gvim
if has('gui_running')

	" Font
	set guifont=Source\ Code\ Pro:h14
	set antialias

	" Hide toolbar
	set guioptions-=T

	" Hide scrollbars on both sides
	set guioptions-=r
	set guioptions-=L

  " Cursor stuff
  set guicursor=n-c-v:block-Cursor-blinkon0
  set guicursor+=i:hor20-Cursor

end

" Show line numbers
set number

" Show matching bracket when you hover on one
set showmatch

" Soft wrap by word
set wrap
set linebreak
set textwidth=0
set wrapmargin=0

" Scroll 4 lines away from margins
set scrolloff=4

" Tabs and EOLs should look like TextMate, but should be hidden by default
set nolist
set listchars=tab:▸\ ,eol:¬

" Make sure the line height is 1 line, not some other madness
set linespace=1

" Statusline
if has('statusline')
	set statusline=\ %F        " Filename + is modified
	set statusline+=\ %m       " Has the file been modified?
	set statusline+=\ %r       " Is the file read-only?
	set statusline+=\ %h       " Is this a help file?
	set statusline+=%=         " Separator
	set statusline+=%c,\       " What column number?
	set statusline+=%l/%L\     " How far into the file are we?
	set laststatus=1           " Show the statusline in 2+ windows
endif

" Lazy redraw (because I SSH)
set lazyredraw

" No error bells nor visual alerts
set noerrorbells
set visualbell t_vb=

" Syntax highlighting
set t_Co=256
if has('syntax')
	syntax on
endif
colorscheme jellybeans
