""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                                            "
"                               Evan Hahn's vimrc                            "
"                                 evanhahn.com                               "
"                                                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Table of contents
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 1. Functional settings
" 2. Interface settings
" 3. Visual settings

" 1. Functional settings
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" We're not vi!
set nocompatible

" Pathematical!
call pathogen#infect()

" Remember lots of commands
set history=1000

" Use system clipboard
if has('gui_running')
	set clipboard=unnamed
end

" Autoupdate files from the outside
set autoread

" pwd should be this file, not some other madness
set autochdir

" Disable backup
set nobackup
set nowb
set noswapfile

" Things to ignore
set wildignore=*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.class,.svn,*.gem

" Delete trailing whitespace on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
autocmd BufWrite *.js :call DeleteTrailingWS()

" English language and no spellchecking by default
if has('spell')
	silent! language messages "en"
	set langmenu=none
	set spl=en spell
	set nospell
endif

" No syntax highlighting for any file that's larger than .5MB
if has('autocmd')
	autocmd BufReadPost * if getfsize(bufname("%")) > 512*1024 |
	\ set syntax= |
	\ endif
endif

" Let us make doc tags
helptags ~/.vim/doc

" Language-specific
filetype on
filetype plugin on
if has('autocmd')
	au BufNewFile,BufRead *.rb setlocal et sw=2 ts=2 " Ruby is 2 spaces
	au BufRead,BufNewFile {Gemfile,Capfile,Kirkfile,Rakefile,Thorfile,config.ru} set ft=ruby " Other things are Ruby
	au BufNewFile,BufRead *.less set filetype=less " LESS
	au BufNewFile,BufRead *.rss setfiletype xml " RSS is XML
	au BufNewFile,BufRead *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown " Markdown
	au BufNewFile,BufRead *.json set ft=javascript " JSON is JavaScript
	au BufNewFile,BufRead *gitconfig setf gitconfig " gitconfigs
	au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell! " Git commits have spellcheck
	au BufNewFile,BufRead COMMIT_EDITMSG call feedkeys('ggi', 't') " Git commits go to top of line and into insert mode
endif

" UniversityNow-specific
if has('autocmd')
	autocmd BufNewFile,BufRead */unow-web/*.{scss,js} setlocal et shiftwidth=4 tabstop=4
endif

" Reload vimrc when it's changed
if has('autocmd')
	autocmd! BufWritePost vimrc source ~/.vimrc
endif

" Return to normal mode when focus is lost
if has('autocmd')
	au FocusLost * call feedkeys("\<C-\>\<C-n>")
endif

" Start the Indent Guides plugin, but only on gvims
if version >= 702
	if has('gui_running')
		let g:indent_guides_enable_on_vim_startup=1
	endif
endif

" ctrlp.vim
let g:ctrlp_clear_cache_on_exit=0

" EasyMotion
let g:EasyMotion_leader_key = '<Leader>'
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade Comment

" Syntastic
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1
let g:syntastic_auto_loc_list=2
let g:syntastic_error_symbol='★'
let g:syntastic_style_error_symbol='>'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_warning_symbol='>'
let loaded_javascript_syntax_checker=1

" 2. Interface settings
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Split to the right
set splitright

" Mouse support
if has('mouse')
	set mouse=a
endif

" Comma is leader
let mapleader = ','
let g:mapleader = ','

" Map Y to act like D and C: yank to EOL
map Y y$

" When moving up/down, go visually, not by line
map j gj
map k gk

" Both "jk" and "kj" in Insert mode exit that fine mode
inoremap jk <Esc>
inoremap kj <Esc>

" :W == :w
cnoreabbrev W w

" ; is :
nnoremap ; :

" Restore previous cursor position
if has('autocmd')
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" Indenting
filetype indent on
set autoindent smartindent        " Auto-indent
set smarttab                      " Better tab and Backspace
set noexpandtab                   " Tabbed indent
set copyindent preserveindent     " Preserve indent structure
set softtabstop=0                 " No spaces when tabbing
set shiftwidth=2                  " Two characters wide when using >> and stuff
set tabstop=2                     " Tabs count for 2 spaces
vnoremap < <gv                    " Reselect visual block after indent
vnoremap > >gv
vnoremap = =gv

" Searching
set ignorecase    " Ignore case when searching...
set smartcase     " ...unless there are caps.
set incsearch     " Incremental search
set hlsearch      " Highlight matches

" Undo level
set ul=1000
" Save undo history
if has('undodir')
	set undodir=~/.vim/backups
endif
if has('undofile')
	set undofile
endif

" Control + N opens NERDTree
nmap <silent> <c-n> :NERDTreeToggle<CR>    " NERD tree mapping on C-n

" Let us make our commands beautiful
set wildmenu
set wildmode=list:longest,full

" Switching tabs like Firefox/Chrome
" From http://vimcasts.org/episodes/working-with-tabs/
if has('unix')
	let s:uname = system('uname')
	if s:uname == "Darwin\n"
		map <D-S-]> gt
		map <D-S-[> gT
		map <D-1> 1gt
		map <D-2> 2gt
		map <D-3> 3gt
		map <D-4> 4gt
		map <D-5> 5gt
		map <D-6> 6gt
		map <D-7> 7gt
		map <D-8> 8gt
		map <D-9> 9gt
		map <D-0> :tablast<CR>
	else
		map <C-S-]> gt
		map <C-S-[> gT
		map <C-1> 1gt
		map <C-2> 2gt
		map <C-3> 3gt
		map <C-4> 4gt
		map <C-5> 5gt
		map <C-6> 6gt
		map <C-7> 7gt
		map <C-8> 8gt
		map <C-9> 9gt
		map <C-0> :tablast<CR>
	endif
endif

" 3. Visual settings
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" gvim (and MacVim)
if has('gui_running')

	" Font
	if has('gui_macvim')
		set guifont=Inconsolata:h16
	else
		set guifont=Consolas:h12
	endif
	set antialias

	" Hide toolbar
	set guioptions-=T

	" Hide scrollbars
	set guioptions-=r
	set guioptions-=L

end

" Syntax highlighting with Jellybeans
if has('syntax')
	syntax on
endif
colorscheme jellybeans

" 256 colors for terminal
set t_Co=256                   

" Highlight cursor position and current line
set ruler
set cursorline

" Show line numbers
set number

" Show matching bracket when you hover on one
set showmatch

" Soft wrap by word
set wrap
set linebreak
set textwidth=0
set wrapmargin=0

" Scroll 4 lines away from margins
set scrolloff=4

" Tabs and EOLs should look like TextMate, but should be hidden by default
set nolist
set listchars=tab:▸\ ,eol:¬

" Make sure the line height is 1 line, not some other madness
set linespace=1

" Terminal title (doesn't affect gvim)
set title

" Statusline
if has('statusline')

	" Statusline content
	set statusline=\ %F        " Filename + is modified
	set statusline+=\ %m       " Has the file been modified?
	set statusline+=\ %r       " Is the file read-only?
	set statusline+=\ %h       " Is this a help file?
	set statusline+=%=         " Separator
	set statusline+=%c,\       " What column number?
	set statusline+=%l/%L\     " How far into the file are we?
	set laststatus=2           " Always show the statusline

	" Statusline color changes depending on mode
	hi StatusLine term=reverse ctermfg=7 ctermbg=16 guifg=#ffffff guibg=#000000 gui=bold
	if has('autocmd')
		au InsertLeave * hi StatusLine term=reverse ctermfg=7 ctermbg=16 guifg=#ffffff guibg=#000000 gui=bold " same as above
		au InsertEnter * hi StatusLine term=reverse ctermfg=7 ctermbg=53 guifg=#ffffff guibg=#721d71 gui=bold
	endif

endif

" No error bells nor visual alerts
set noerrorbells
set visualbell t_vb=
